name: Build and Release

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.2.1'

env:
  NODE_VERSION: '18'

jobs:
  security-check:
    name: Pre-Release Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security tests
      run: |
        echo "🔒 Running pre-release security verification..."
        node security-test.js
        node integration-test.js

    - name: Run npm audit
      run: npm audit --audit-level=high

    - name: Install and run retire.js
      run: |
        npm install -g retire
        retire --path . --exitwith 1

    - name: Security verification complete
      run: echo "✅ Security verification passed - ready for release!"

  build-macos:
    name: Build macOS Application
    runs-on: macos-latest
    needs: security-check

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Python for node-gyp
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Rebuild native dependencies for macOS
      run: npm run electron:rebuild

    - name: Build Angular application
      run: npm run build --configuration=production

    - name: Build macOS Electron app
      run: npm run electron:build:mac
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for now
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create macOS artifacts info
      run: |
        echo "📦 macOS Build Information" > macos-build-info.txt
        echo "Built on: $(date)" >> macos-build-info.txt
        echo "Node version: $(node --version)" >> macos-build-info.txt
        echo "NPM version: $(npm --version)" >> macos-build-info.txt
        echo "Electron version: $(npx electron --version)" >> macos-build-info.txt
        ls -la dist-electron/ >> macos-build-info.txt

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist-electron/*.dmg
          dist-electron/*.zip
          dist-electron/*.yml
          dist-electron/*.yaml
          dist-electron/*.blockmap
          macos-build-info.txt
        retention-days: 30

  build-windows:
    name: Build Windows Application
    runs-on: windows-latest
    needs: security-check

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Python for node-gyp
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Rebuild native dependencies for Windows
      run: npm run electron:rebuild

    - name: Build Angular application
      run: npm run build --configuration=production

    - name: Build Windows Electron app
      run: npm run electron:build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Windows artifacts info
      run: |
        echo "📦 Windows Build Information" > windows-build-info.txt
        echo "Built on: $(Get-Date)" >> windows-build-info.txt
        echo "Node version: $(node --version)" >> windows-build-info.txt
        echo "NPM version: $(npm --version)" >> windows-build-info.txt
        echo "Electron version: $(npx electron --version)" >> windows-build-info.txt
        Get-ChildItem dist-electron/ | Format-Table >> windows-build-info.txt

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist-electron/*.exe
          dist-electron/*.nsis.7z
          dist-electron/*.yml
          dist-electron/*.yaml
          dist-electron/*.blockmap
          windows-build-info.txt
        retention-days: 30

  test-builds:
    name: Test Built Applications
    runs-on: ubuntu-latest
    needs: [ build-macos, build-windows ]

    steps:
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: macos-artifacts/

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: windows-artifacts/

    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        echo "macOS artifacts:"
        ls -la macos-artifacts/
        echo ""
        echo "Windows artifacts:"
        ls -la windows-artifacts/
        echo ""

        # Check for expected files
        if [ -f "macos-artifacts"/*.dmg ]; then
          echo "✅ macOS DMG found"
        else
          echo "❌ macOS DMG missing"
          exit 1
        fi

        if [ -f "windows-artifacts"/*.exe ]; then
          echo "✅ Windows EXE found"
        else
          echo "❌ Windows EXE missing"
          exit 1
        fi

        echo "✅ All expected build artifacts verified!"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ test-builds ]
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: release-artifacts/

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: release-artifacts/

    - name: Prepare release notes
      run: |
        echo "# ZTMM Assessment Release" > release-notes.md
        echo "" >> release-notes.md
        echo "## 🔒 Security Features" >> release-notes.md
        echo "- ✅ SQL injection protection implemented and tested" >> release-notes.md
        echo "- ✅ Input validation on all user inputs" >> release-notes.md
        echo "- ✅ Secure database operations with prepared statements" >> release-notes.md
        echo "- ✅ Comprehensive security testing suite" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📦 What's Included" >> release-notes.md
        echo "- **macOS**: Universal binary (.dmg and .zip)" >> release-notes.md
        echo "- **Windows**: Installer (.exe) and portable (.zip)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🛡️ Security Verification" >> release-notes.md
        echo "This release has been scanned and verified for:" >> release-notes.md
        echo "- SQL injection vulnerabilities" >> release-notes.md
        echo "- Known dependency vulnerabilities" >> release-notes.md
        echo "- Retired JavaScript libraries" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📋 Installation Instructions" >> release-notes.md
        echo "### macOS" >> release-notes.md
        echo "1. Download the .dmg file" >> release-notes.md
        echo "2. Open the .dmg and drag the app to Applications" >> release-notes.md
        echo "3. Right-click and 'Open' to bypass Gatekeeper if needed" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Windows" >> release-notes.md
        echo "1. Download the .exe file" >> release-notes.md
        echo "2. Run the installer as Administrator" >> release-notes.md
        echo "3. Follow the installation wizard" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🔍 Checksums" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        find release-artifacts/ -name "*.dmg" -o -name "*.exe" -o -name "*.zip" | xargs sha256sum >> release-notes.md
        echo "\`\`\`" >> release-notes.md

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: "ZTMM Assessment ${{ steps.get_version.outputs.version }}"
        body_path: release-notes.md
        files: |
          release-artifacts/*.dmg
          release-artifacts/*.exe
          release-artifacts/*.zip
          release-artifacts/*-build-info.txt
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release summary
      run: |
        echo "🎉 Release ${{ steps.get_version.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Released Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "### macOS" >> $GITHUB_STEP_SUMMARY
        find release-artifacts/ -name "*.dmg" -exec basename {} \; | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Windows" >> $GITHUB_STEP_SUMMARY
        find release-artifacts/ -name "*.exe" -exec basename {} \; | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 Security Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ All security checks passed before release" >> $GITHUB_STEP_SUMMARY
