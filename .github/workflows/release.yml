name: Package and Release Source

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.2.1'

env:
  NODE_VERSION: '18'

jobs:
  package-source:
    name: Package Source Code
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Angular application
      run: npm run build --configuration=production

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

        # Clean version for directory name (remove 'v' prefix if present)
        CLEAN_VERSION=${VERSION#v}
        echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

    - name: Create source package
      run: |
        VERSION="${{ steps.get_version.outputs.clean_version }}"
        PACKAGE_NAME="ztmm-assessment-${VERSION}"

        # Create package directory
        mkdir -p "${PACKAGE_NAME}"

        # Copy source files excluding build artifacts and dependencies
        rsync -av --exclude='node_modules' \
                  --exclude='dist' \
                  --exclude='dist-electron' \
                  --exclude='.git' \
                  --exclude='.github' \
                  --exclude='*.log' \
                  --exclude='.angular' \
                  --exclude='coverage' \
                  ./ "${PACKAGE_NAME}/"

        # Create source tarball
        tar -czf "${PACKAGE_NAME}-source.tar.gz" "${PACKAGE_NAME}"

        # Create source zip
        zip -r "${PACKAGE_NAME}-source.zip" "${PACKAGE_NAME}"

        # Create checksums
        sha256sum "${PACKAGE_NAME}-source.tar.gz" > "${PACKAGE_NAME}-source.tar.gz.sha256"
        sha256sum "${PACKAGE_NAME}-source.zip" > "${PACKAGE_NAME}-source.zip.sha256"

    - name: Create build info
      run: |
        VERSION="${{ steps.get_version.outputs.clean_version }}"
        echo "📦 ZTMM Assessment Source Release Information" > source-build-info.txt
        echo "Version: ${VERSION}" >> source-build-info.txt
        echo "Built on: $(date)" >> source-build-info.txt
        echo "Node version: $(node --version)" >> source-build-info.txt
        echo "NPM version: $(npm --version)" >> source-build-info.txt
        echo "Repository: ${{ github.repository }}" >> source-build-info.txt
        echo "Commit: ${{ github.sha }}" >> source-build-info.txt
        echo "" >> source-build-info.txt
        echo "## Build Instructions" >> source-build-info.txt
        echo "1. Install Node.js 18 or later" >> source-build-info.txt
        echo "2. Run: npm install" >> source-build-info.txt
        echo "3. Run: npm run build" >> source-build-info.txt
        echo "4. Run: npm run electron:build" >> source-build-info.txt

    - name: Prepare release notes
      run: |
        echo "# ZTMM Assessment Source Release" > release-notes.md
        echo "" >> release-notes.md
        echo "## 📦 Source Code Release" >> release-notes.md
        echo "This release contains the complete source code for the ZTMM Assessment application." >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🔒 Security Features" >> release-notes.md
        echo "- ✅ SQL injection protection implemented and tested" >> release-notes.md
        echo "- ✅ Input validation on all user inputs" >> release-notes.md
        echo "- ✅ Secure database operations with prepared statements" >> release-notes.md
        echo "- ✅ Comprehensive security testing suite" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📋 What's Included" >> release-notes.md
        echo "- **Source Archive**: Complete source code (tar.gz and zip formats)" >> release-notes.md
        echo "- **Build Instructions**: Detailed setup and build guide" >> release-notes.md
        echo "- **Security Documentation**: Security implementation details" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🛠️ Build Requirements" >> release-notes.md
        echo "- Node.js 18 or later" >> release-notes.md
        echo "- npm (comes with Node.js)" >> release-notes.md
        echo "- Git (for cloning)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🚀 Quick Start" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "# Extract the source archive" >> release-notes.md
        echo "tar -xzf ztmm-assessment-*-source.tar.gz" >> release-notes.md
        echo "cd ztmm-assessment-*" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Install dependencies" >> release-notes.md
        echo "npm install" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Build the application" >> release-notes.md
        echo "npm run build" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Run development server" >> release-notes.md
        echo "npm start" >> release-notes.md
        echo "" >> release-notes.md
        echo "# Build Electron applications" >> release-notes.md
        echo "npm run electron:build" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🔍 Checksums" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        cat *.sha256 >> release-notes.md
        echo "\`\`\`" >> release-notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: "ZTMM Assessment ${{ steps.get_version.outputs.version }} (Source)"
        body_path: release-notes.md
        files: |
          *-source.tar.gz
          *-source.zip
          *.sha256
          source-build-info.txt
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release summary
      run: |
        echo "🎉 Source release ${{ steps.get_version.outputs.version }} created successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Released Source Packages" >> $GITHUB_STEP_SUMMARY
        ls -la *-source.* | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔧 Build Instructions" >> $GITHUB_STEP_SUMMARY
        echo "Users can download the source and build locally using:" >> $GITHUB_STEP_SUMMARY
        echo "1. \`npm install\`" >> $GITHUB_STEP_SUMMARY
        echo "2. \`npm run build\`" >> $GITHUB_STEP_SUMMARY
        echo "3. \`npm run electron:build\`" >> $GITHUB_STEP_SUMMARY
